---
import { loadQuery } from "../../sanity/lib/load-query.js";
import LayoutShort from "../../layouts/LayoutShort.astro";
import Header1 from "../../components/atoms/headers/Header1.astro";
import Header2 from "../../components/atoms/headers/Header2.astro";
import { sanityClient } from "sanity:client";
import { PortableText } from "astro-portabletext";
import { List } from "astro-portabletext/components";
import Prose from "../../components/Prose.astro";
import FormattedDate from "../../components/atoms/FormattedDate.astro";
import BlogImage from "../../components/portabletext/BlogImage.astro";
import YouTubeEmbed from "../../components/portabletext/YouTubeEmbed.jsx";
import ContentContainer from "../../components/atoms/ContentContainer.astro";
import BlogPreviousNext from "../../components/BlogPreviousNext.astro";
import BlogCategories from "../../components/BlogCategories.astro";
import SanityImage from "../../components/atoms/SanityImage.astro";

export async function getStaticPaths() {
  const posts = await sanityClient.fetch(
    `*[_type == "post" && defined(slug.current)]`
  );

  return posts.map((post) => ({
    params: { slug: post.slug.current },
  }));
}

const { slug } = Astro.params;

const query = `*[_type == "post" && slug.current == $slug][0] {
    "current": {  
        title,
        body,
        mainImage,
     _createdAt,
        "categories": categories[]->{
        "title": title,
        "slug": slug.current
        }
    },
    "previous": *[_type == "post" && _createdAt < ^._createdAt] | order(_createdAt desc) [0] {
    title,
    slug
    },
    "next": *[_type == "post" && _createdAt > ^._createdAt] | order(_createdAt asc) [0] {
    title,
    slug
    }
}`;

// title, body, _createdAt, categories
const { current, previous, next } = await sanityClient.fetch(
    query,   
    { slug }
);

const components = {
  list: List,
  type: {
    image: BlogImage,
    youTube: YouTubeEmbed
  },
};

const { title, body, _createdAt, mainImage, categories } = current;

// Initialize variables with optional chaining and nullish coalescing
const prevTitle = previous?.title ?? null;
const prevSlug = previous?.slug.current ?? null;
const nextTitle = next?.title ?? null;
const nextSlug = next?.slug.current ?? null;

console.log(categories);

---

<LayoutShort title="Logickal - JRNL">
  <ContentContainer bgType="dark">
    <div class="mb-5">
      <Header1>JRNL</Header1>
      <Header2>{title}</Header2>
      <div>
        <FormattedDate type="light" discogDate={_createdAt} />
      </div>
      <div>
        <BlogCategories categories={categories} />
    </div>
    <div>
      {mainImage && <SanityImage node={mainImage} width={960} />}
    </div>
    <div class="text-gray-400 text-sm text-left">
      <Prose extraClasses="prose-a:text-blue-600 prose-a:hover:text-blue-300">
        <PortableText value={body} components={components} />
      </Prose>
    </div>
    <div>
    </div>

    <BlogPreviousNext previous={previous} next={next} />
  </ContentContainer>
</LayoutShort>
